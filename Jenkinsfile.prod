pipeline {
    agent any 

    environment {
        // üîß Proje Bilgileri
        PROJECT_NAME = "ProductManagment"
        GIT_REPO_URL = "https://github.com/burakhalefoglu/ProductManagment.git"
        GIT_CREDENTIALS_ID = "github-pat"

        // üöÄ Servis ƒ∞simleri
        SERVICE_API = "api_product_management"
        SERVICE_APP = "product_management"
        SERVICE_API_BLUE = "api_product_management_blue"
        SERVICE_APP_BLUE = "product_management_blue"

        // üê≥ Compose Dosyalarƒ±
        COMPOSE_MAIN = "docker-compose-prod.yaml"
        COMPOSE_BLUE = "docker-compose-prod-blue.yaml"

        // üè∑Ô∏è Build Etiketi
        BUILD_TAG = "prod-build-${BUILD_NUMBER}"

        // üì¢ Telegram Bildirim
        TELEGRAM_BOT_TOKEN = "7431226070:AAFh3ArOY6YrYUmFqOu7dL_XL3ZoOb5SnTI"
        TELEGRAM_CHAT_ID = "-1002531470202"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: "${GIT_REPO_URL}",
                        credentialsId: "${GIT_CREDENTIALS_ID}"
                    ]]
                ])
            }
        }

        stage('Build Blue') {
            steps {
                echo "üîµ Blue i√ßin build ba≈ülƒ±yor: ${BUILD_TAG}"
                sh "docker-compose -f ${COMPOSE_BLUE} build --build-arg BUILD_TAG=${BUILD_TAG}"
            }
        }

        stage('Deploy Blue') {
            steps {
                echo "üîµ Blue deploy ediliyor..."
                sh "docker-compose -p blue -f ${COMPOSE_BLUE} up -d --build"
            }
        }

        stage('Health Check Blue') {
            steps {
                script {
                    def retry = 0
                    def maxRetries = 30
                    def apiHealth, appHealth

                    while (retry < maxRetries) {
                        apiHealth = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${SERVICE_API_BLUE} || echo 'unhealthy'", returnStdout: true).trim()
                        appHealth = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${SERVICE_APP_BLUE} || echo 'unhealthy'", returnStdout: true).trim()

                        if (apiHealth == "healthy" && appHealth == "healthy") {
                            echo "‚úÖ Blue container'lar saƒülƒ±klƒ±!"
                            break
                        }

                        echo "‚åõ Saƒülƒ±k kontrol√º bekleniyor... (${retry + 1}/30)"
                        sleep 5
                        retry++
                    }

                    if (apiHealth != "healthy" || appHealth != "healthy") {
                        error("‚ùå Blue container saƒülƒ±k kontrol√º ba≈üarƒ±sƒ±z!")
                    }
                }
            }
        }

        stage('Remove Old Containers') {
            steps {
                echo "üßπ Eski container'lar kaldƒ±rƒ±lƒ±yor..."
                sh """
                    docker stop ${SERVICE_API} || true
                    docker rm ${SERVICE_API} || true
                    docker stop ${SERVICE_APP} || true
                    docker rm ${SERVICE_APP} || true
                """
            }
        }

        stage('Build Main') {
            steps {
                echo "üõ†Ô∏è Ana (main) build ba≈ülƒ±yor: ${BUILD_TAG}"
                sh "docker-compose -f ${COMPOSE_MAIN} build --build-arg BUILD_TAG=${BUILD_TAG}"
            }
        }

        stage('Deploy Main') {
            steps {
                script {
                    try {
                        echo "üöÄ Main servis deploy ediliyor..."
                        sh "docker-compose -f ${COMPOSE_MAIN} up -d --build"
                    } catch (err) {
                        echo "‚ùå Main deploy ba≈üarƒ±sƒ±z! Rollback ba≈ülatƒ±lƒ±yor..."
                        rollback()
                        error("Main deploy ba≈üarƒ±sƒ±z oldu. Blue servislere geri d√∂n√ºld√º.")
                    }
                }
            }
        }

        stage('Down Blue') {
            steps {
                echo "üßπ Blue container'lar durduruluyor..."
                sh "docker-compose -p blue -f ${COMPOSE_BLUE} down || true"
            }
        }
    }

    post {
        success {
            echo "üéâ PROD deploy ba≈üarƒ±lƒ±!"
            sh """
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="‚úÖ PROD Deploy Ba≈üarƒ±lƒ±! Build: ${BUILD_NUMBER} - Proje: ${PROJECT_NAME}"
            """
        }

        failure {
            echo "üö® PROD deploy ba≈üarƒ±sƒ±z oldu!"
            sh """
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="‚ùå PROD Deploy Ba≈üarƒ±sƒ±z! Build: ${BUILD_NUMBER} - Proje: ${PROJECT_NAME}"
            """
        }

        always {
            echo "‚ôªÔ∏è Temizlik i≈ülemleri..."
            sh """
                docker system prune -f || true
                docker volume prune -f || true
                docker image prune -f || true
            """
        }
    }
}

def rollback() {
    echo "üîÅ Blue rollback ba≈ülatƒ±lƒ±yor..."
    sh "docker-compose -p blue -f ${COMPOSE_BLUE} up -d --build"

    sleep 10

    def apiHealth = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${SERVICE_API_BLUE} || echo 'unhealthy'", returnStdout: true).trim()
    def appHealth = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${SERVICE_APP_BLUE} || echo 'unhealthy'", returnStdout: true).trim()

    if (apiHealth != "healthy" || appHealth != "healthy") {
        error("üö® Rollback sonrasƒ± Blue container'lar da saƒülƒ±ksƒ±z!")
    }

    echo "‚úÖ Rollback ba≈üarƒ±lƒ±, Blue yeniden ayaƒüa kalktƒ±!"
}
